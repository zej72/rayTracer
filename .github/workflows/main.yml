name: Build RayTracer

on:
  push:
    branches:
      - master # Workflow uruchomi się po pushu do gałęzi master

jobs:
  build:
    runs-on: ubuntu-latest # Używamy maszyny wirtualnej Ubuntu
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: . # Klonuje repozytorium bezpośrednio do katalogu roboczego

    - name: Install build tools and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libglm-dev # Instalacja g++ i podstawowych narzędzi do kompilacji oraz biblioteki GLM
        # Jeśli Twój projekt używa innych bibliotek (np. Raylib), dodaj je tutaj:
        # sudo apt-get install -y libraylib-dev

    - name: Compile the RayTracer with g++
      run: |
        mkdir -p build # Tworzy katalog 'build' jeśli nie istnieje
        # Kompiluje program używając g++ i umieszcza plik wykonywalny w katalogu 'build'
        # Dodaj tutaj wszelkie flagi kompilatora, których używasz (np. -std=c++17 -O3)
        g++ -o build/rayTracer main.cpp rayTracer.cpp

    - name: Run tests (optional)
      run: |
        # Jeśli masz testy jednostkowe w swoim projekcie, możesz je tutaj uruchomić po pomyślnej kompilacji
        # ./build/rayTracer_tests # Przykładowa komenda do uruchomienia testów

    - name: Upload artifact (optional)
      # Ten krok jest opcjonalny, ale zalecany, jeśli chcesz, aby skompilowany plik
      # był dostępny do pobrania z podsumowania przebiegu workflow.
      # Zwróć uwagę, że akcja 'Upload Release Asset' również przesyła plik do wydania.
      uses: actions/upload-artifact@v4
      with:
        name: rayTracer-binary
        path: build/rayTracer # Ścieżka do skompilowanej binarki w katalogu 'build'

    - name: Create Release
      id: create_release # ID tego kroku do odwoływania się do jego wyjść
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Dostęp do tokena GitHub do tworzenia wydania
      with:
        tag_name: v${{ github.run_number }} # Nazwa tagu (np. v1, v2, ... na podstawie numeru przebiegu workflow)
        release_name: Release v${{ github.run_number }} # Nazwa wydania
        body: | # Opis wydania
          Automatyczne wydanie wygenerowane przez GitHub Actions.
          Commit: ${{ github.sha }}
          # Możesz dodać więcej szczegółów, np. changelog, z innych źródeł
        draft: false # Wydanie zostanie od razu opublikowane (nie jako szkic)
        prerelease: false # To nie jest wydanie pre-release

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # URL do przesyłania plików do wydania
        asset_path: build/rayTracer # Ścieżka do skompilowanej binarki
        asset_name: rayTracer-v${{ github.run_number }}-linux # Nazwa pliku w wydaniu (z sufiksem OS)
        asset_content_type: application/octet-stream # Typ MIME pliku binarnego
